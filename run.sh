#!/bin/bash

# ======================================
# Terrain Navigator - Build & Run Script
# ======================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
# 1. –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ CMake
# 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É
# 3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ (—Ñ–∞–π–ª/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./run.sh          # –ó–∞–ø—É—Å–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#   ./run.sh commands # –ó–∞–ø—É—Å–∫ —Å —Ñ–∞–π–ª–æ–º commandsGauss.cmd
# ======================================

set -euo pipefail

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BUILD_DIR="build"
COMMAND_FILE="bin/etc/commands/commandsGauss.cmd"
EXEC_NAME="terrain_navigator"

# --- –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ---
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# --- –§—É–Ω–∫—Ü–∏–∏ ---
error() {
    echo -e "${RED}ERROR: $1${NC}" >&2
    exit 1
}

success() {
    echo -e "${GREEN}$1${NC}"
}

info() {
    echo -e "${YELLOW}$1${NC}"
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
check_dependencies() {
    if ! command -v cmake &>/dev/null; then
        error "CMake not found! Install with:\n  Ubuntu: sudo apt install cmake\n  macOS: brew install cmake"
    fi

    if (( $(cmake --version | grep -oE '[0-9]+\.[0-9]+' | head -1 | awk '{print ($1 < 3.12)}') )); then
        error "CMake 3.12+ required"
    fi
}

# --- –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ---
build_project() {
    info "üîß Configuring project..."
    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"
    cmake .. -DCMAKE_BUILD_TYPE=Release
    
    CPU_CORES=$(nproc --all 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
    info "üèó  Building with $CPU_CORES cores..."
    cmake --build . --parallel "$CPU_CORES"
    
    cd ..
}

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
run_program() {
    local mode=$1
    
    info "üöÄ Launching program..."
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    PROJECT_ROOT="$(dirname "$(realpath "$0")")"
    
    if [[ "$mode" == "file" ]]; then
        CMD_FILE="$PROJECT_ROOT/$COMMAND_FILE"
        if [[ ! -f "$CMD_FILE" ]]; then
            error "Command file $CMD_FILE not found!"
        fi
        # –ü–µ—Ä–µ–¥–∞—ë–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
        echo -e "1\n$CMD_FILE\n$PROJECT_ROOT" | "$PROJECT_ROOT/$BUILD_DIR/bin/$EXEC_NAME"
    else
        echo -e "0\n$PROJECT_ROOT" | "$PROJECT_ROOT/$BUILD_DIR/bin/$EXEC_NAME"
    fi
    
    if [[ $? -eq 0 ]]; then
        success "‚úÖ Program finished successfully"
        info "üìÅ Results saved in $PROJECT_ROOT/results/"
    else
        error "Program failed"
    fi
}

# --- –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç ---
main() {
    check_dependencies
    
    # –°–±–æ—Ä–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [[ ! -f "$BUILD_DIR/bin/$EXEC_NAME" ]]; then
        build_project
    else
        info "‚úÖ Build already exists - skipping"
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    if [[ $# -gt 0 && "$1" == "commands" ]]; then
        run_program "file"
    else
        run_program "interactive"
    fi
}

main "$@"
